import pandas as pd
import ta
from binance.client import Client

# Configurar API Key e Secret Key (substituir pelos seus dados)
API_KEY = ""
API_SECRET = ""

# Criar cliente Binance
client = Client(API_KEY, API_SECRET)

# Configura√ß√µes globais
SYMBOL = "BTCUSDT"  # Par de negocia√ß√£o
TIMEFRAME = Client.KLINE_INTERVAL_5MINUTE  # Timeframe de 5 minutos
CANDLE_LIMIT = 50  # N√∫mero de candles a buscar

def obter_dados_historicos(symbol, timeframe, limit):
    """ Obt√©m dados de mercado da Binance e retorna um DataFrame """
    candles = client.get_klines(symbol=symbol, interval=timeframe, limit=limit)
    
    df = pd.DataFrame(candles, columns=["timestamp", "open", "high", "low", "close", "volume",
                                        "close_time", "quote_asset_volume", "number_of_trades",
                                        "taker_buy_base", "taker_buy_quote", "ignore"])
    
    # Converter colunas para n√∫meros
    df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)
    
    return df

def calcular_indicadores(df):
    """ Calcula M√©dias M√≥veis e RSI e adiciona ao DataFrame """
    
    # Calcular M√©dia M√≥vel Curta (9 per√≠odos)
    df["SMA9"] = df["close"].rolling(window=9).mean()

    # Calcular M√©dia M√≥vel Longa (21 per√≠odos)
    df["SMA21"] = df["close"].rolling(window=21).mean()

    # Calcular RSI com janela de 14 per√≠odos
    df["RSI"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()

    # Remover linhas iniciais com NaN (necess√°rio por causa do rolling window)
    df.dropna(inplace=True)

    return df

def verificar_sinais(df):
    """ Verifica sinais de compra e venda e informa quais crit√©rios foram atingidos """

    if df.empty:
        print("‚ùå ERRO: DataFrame vazio ap√≥s remo√ß√£o de valores NaN.")
        return

    # √öltimos valores dos indicadores
    ultima_sma9 = df["SMA9"].iloc[-1]
    ultima_sma21 = df["SMA21"].iloc[-1]
    penultima_sma9 = df["SMA9"].iloc[-2]
    penultima_sma21 = df["SMA21"].iloc[-2]
    ultimo_rsi = df["RSI"].iloc[-1]

    print("\nüìä Indicadores Atuais:")
    print(f"SMA9 Atual: {ultima_sma9:.2f} | SMA21 Atual: {ultima_sma21:.2f}")
    print(f"SMA9 Anterior: {penultima_sma9:.2f} | SMA21 Anterior: {penultima_sma21:.2f}")
    print(f"RSI Atual: {ultimo_rsi:.2f}\n")

    # üìå Verificar os crit√©rios separadamente
    cruzamento_compra = ultima_sma9 > ultima_sma21 and penultima_sma9 <= penultima_sma21
    cruzamento_venda = ultima_sma9 < ultima_sma21 and penultima_sma9 >= penultima_sma21
    rsi_compra = ultimo_rsi < 30
    rsi_venda = ultimo_rsi > 70

    # üìå Relat√≥rio de verifica√ß√£o dos crit√©rios
    print("üõ†Ô∏è Verifica√ß√£o dos Crit√©rios:\n")

    # M√©dias M√≥veis
    if cruzamento_compra:
        print("‚úÖ Crit√©rio de COMPRA pelas M√©dias M√≥veis atingido (SMA9 cruzou acima da SMA21).")
    else:
        print("‚ùå Crit√©rio de COMPRA pelas M√©dias M√≥veis N√ÉO atingido.")

    if cruzamento_venda:
        print("‚úÖ Crit√©rio de VENDA pelas M√©dias M√≥veis atingido (SMA9 cruzou abaixo da SMA21).")
    else:
        print("‚ùå Crit√©rio de VENDA pelas M√©dias M√≥veis N√ÉO atingido.")

    # RSI
    if rsi_compra:
        print("‚úÖ Crit√©rio de COMPRA pelo RSI atingido (RSI < 30).")
    else:
        print(f"‚ùå Crit√©rio de COMPRA pelo RSI N√ÉO atingido (RSI atual: {ultimo_rsi:.2f}).")

    if rsi_venda:
        print("‚úÖ Crit√©rio de VENDA pelo RSI atingido (RSI > 70).")
    else:
        print(f"‚ùå Crit√©rio de VENDA pelo RSI N√ÉO atingido (RSI atual: {ultimo_rsi:.2f}).")

    # üìå Crit√©rio de Entrada (Comprar)
    if cruzamento_compra and rsi_compra:
        print("\n‚úÖ Sinal de COMPRA confirmado: M√©dias M√≥veis e RSI atingiram os crit√©rios!\n")
    else:
        print("\n‚ö†Ô∏è Sinal de COMPRA N√ÉO confirmado: Faltam crit√©rios para ativar a compra.\n")

    # üìå Crit√©rio de Sa√≠da (Vender)
    if cruzamento_venda or rsi_venda:
        print("üö® Sinal de VENDA confirmado: Um dos crit√©rios de venda foi atingido!\n")
    else:
        print("‚ö†Ô∏è Sinal de VENDA N√ÉO confirmado: Faltam crit√©rios para ativar a venda.\n")


def obter_preco_atual(symbol):
    """ Obt√©m o pre√ßo atual do ativo """
    ticker = client.get_symbol_ticker(symbol=symbol)
    preco_atual = float(ticker["price"])
    print(f"\nüí∞ Pre√ßo Atual do {symbol}: {preco_atual:.2f}\n")
    return preco_atual

# EXECU√á√ÉO
df = obter_dados_historicos(SYMBOL, TIMEFRAME, CANDLE_LIMIT)
df = calcular_indicadores(df)
obter_preco_atual(SYMBOL)
verificar_sinais(df)


